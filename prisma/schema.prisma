generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model WaitList {
  id        String   @id @default(uuid())
  value     String   @unique
  approved  Boolean
  schoolId  String
  role      Role     @default(manager)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  school    School   @relation(fields: [schoolId], references: [id])
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresIn Int
  sponsorId String?
  Sponsor   Sponsor? @relation(fields: [sponsorId], references: [id])
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  password      String
  birthDate     DateTime
  phone         String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  gender        Gender
  type          TypeUser
  avatar        String?
  recoverToken  String?
  address       Address[]
  admin         Admin?
  manager       Manager?
  refreshTokens RefreshToken[]
  student       Student?
  teacher       Teacher?
}

model Sponsor {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  studentId     String
  type          TypeUser
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[]
}

model Student {
  id                 String               @id @default(uuid())
  schoolId           String
  status             Boolean
  enrollment         String               @unique
  classId            String?
  entryForm          String
  reasonForTransfer  String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  userId             String               @unique
  class              Class?               @relation(fields: [classId], references: [id], onDelete: Cascade)
  school             School               @relation(fields: [schoolId], references: [id])
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  EvaluativeDelivery EvaluativeDelivery[]
  gradebook          Gradebook[]
  LackOfClass        LackOfClass[]
  reportAverage      ReportAverage[]
  reportCard         ReportCard[]
}

model Manager {
  id        String   @id @default(uuid())
  status    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  schools   School[]
}

model Admin {
  id        String   @id @default(uuid())
  status    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Teacher {
  id          String       @id @default(uuid())
  status      Boolean
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String       @unique
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  disciplines Discipline[]
  schools     School[]
}

model School {
  id        String     @id @default(uuid())
  name      String
  phone     String
  cnpj      String?    @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  email     String
  inep      String?
  avatar    String?
  address   Address[]
  classes   Class[]
  Period    Period[]
  students  Student[]
  waitist   WaitList[]
  managers  Manager[]
  teachers  Teacher[]
}

model Discipline {
  id                  String                @id @default(uuid())
  name                String
  teacherId           String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  classId             String
  topic               String
  class               Class                 @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher             Teacher?              @relation(fields: [teacherId], references: [id])
  Content             Content[]
  DisciplineSchedules DisciplineSchedules[]
  gradebook           Gradebook[]
  homeWorks           HomeWork[]
  lessons             Lesson[]
  reportAverage       ReportAverage[]
  schedules           Schedule[]
}

model Class {
  id          String       @id @default(uuid())
  name        String
  schooldId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  school      School       @relation(fields: [schooldId], references: [id])
  disciplines Discipline[]
  students    Student[]
}

model HomeWork {
  id                 String               @id @default(uuid())
  name               String
  description        String
  disciplineId       String
  dueDate            DateTime?
  isOpen             Boolean?
  attachement        String?
  type               TypeHomeWork
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  weight             Float?               @default(1)
  startDate          DateTime?
  discipline         Discipline           @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
  evaluativeDelivery EvaluativeDelivery[]
  ReportCard         ReportCard[]
}

model EvaluativeDelivery {
  id          String           @id @default(uuid())
  studentId   String
  homeWorkId  String
  dueDate     DateTime?
  attachement String?
  stage       EvaluationStage?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  owner       OwnerAction
  rate        Float?
  homeWork    HomeWork         @relation(fields: [homeWorkId], references: [id])
  student     Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Gradebook {
  id           String     @id @default(uuid())
  studentId    String
  disciplineId String
  numberOfTerm Int
  schoolTerm   String
  mean         Float
  approved     Boolean?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  discipline   Discipline @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Schedule {
  id           String     @id @default(uuid())
  day          Day
  disciplineId String
  periodId     String
  initialHour  String
  finishHour   String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  discipline   Discipline @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
  period       Period     @relation(fields: [periodId], references: [id], onDelete: Cascade)
  lesson       Lesson[]
}

model Period {
  id            String          @id @default(uuid())
  startOfPeriod DateTime
  endOfPeriod   DateTime
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  name          String
  schoolId      String
  school        School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  contents      Content[]
  registerClass RegisterClass[]
  reportAverage ReportAverage[]
  reportCard    ReportCard[]
  schedule      Schedule[]
}

model ReportCard {
  id         String   @id @default(uuid())
  homeWorkId String
  studentId  String
  periodId   String
  homeWork   HomeWork @relation(fields: [homeWorkId], references: [id])
  period     Period   @relation(fields: [periodId], references: [id], onDelete: Cascade)
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model ReportAverage {
  id           String     @id @default(uuid())
  rate         Float
  disciplineId String
  studentId    String
  periodId     String
  discipline   Discipline @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
  period       Period     @relation(fields: [periodId], references: [id], onDelete: Cascade)
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Content {
  id            String          @id @default(uuid())
  name          String
  subContent    String
  periodId      String?
  disciplineId  String
  discipline    Discipline      @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
  Period        Period?         @relation(fields: [periodId], references: [id], onDelete: Cascade)
  registerClass RegisterClass[]
}

model RegisterClass {
  id        String             @id @default(uuid())
  type      TypeRegisterClass?
  periodId  String?
  contentId String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  lessonId  String?
  Content   Content?           @relation(fields: [contentId], references: [id])
  Lesson    Lesson?            @relation(fields: [lessonId], references: [id])
  Period    Period?            @relation(fields: [periodId], references: [id], onDelete: Cascade)
}

model LackOfClass {
  id         String   @id @default(uuid())
  lessonId   String
  studentId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lessonDate String?
  lesson     Lesson   @relation(fields: [lessonId], references: [id])
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Lesson {
  id            String          @id @default(uuid())
  name          String
  description   String
  disciplineId  String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  classDate     String?
  notes         String?
  scheduleId    String?
  discipline    Discipline      @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
  schedule      Schedule?       @relation(fields: [scheduleId], references: [id])
  LackOfClass   LackOfClass[]
  RegisterClass RegisterClass[]
}

model DisciplineSchedules {
  id           String     @id @default(uuid())
  day          Day
  disciplineId String
  initialHour  String
  finishHour   String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  discipline   Discipline @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
}

model Address {
  id           String   @id @default(uuid())
  labelAddress String?
  city         String
  number       String
  area         String
  uf           String
  zipCode      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  street       String
  schoolId     String?
  userId       String?
  school       School?  @relation(fields: [schoolId], references: [id])
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Gender {
  male       @map("Masculino")
  female     @map("Feminino")
  notBinary  @map("Não Binário")
  others     @map("Outros")
  notInform  @map("Prefiro Não Informar")
}

enum Role {
  admin    @map("Administrador")
  manager  @map("Gestor")
  teacher  @map("Professor")
  others   @map("Outros")
  student  @map("Estudante")
}

enum TypeUser {
  admin    @map("Administrador")
  manager  @map("Gestor")
  teacher  @map("Professor")
  student  @map("Estudante")
  others   @map("Outros")
  sponsor  @map("Responsável")
}

enum TypeRegisterClass {
  planEducation  @map("Plano de Ensino")
  loose          @map("Avulso")
}

enum Day {
  monday     @map("Segunda-Feira")
  tuesday    @map("Terça-Feira")
  wednesday  @map("Quarta-Feira")
  thursday   @map("Quinta-Feira")
  friday     @map("Sexta-Feira")
  saturday   @map("Sábado")
  sunday     @map("Domingo")
}

enum TypeHomeWork {
  activity  @map("Atividade")
  exame     @map("Prova")
  work      @map("Trabalho")
  others    @map("Outros")
  test      @map("Avaliação")
}

enum EvaluationStage {
  sent       @map("Enviada")
  overdue    @map("Atrasada")
  pending    @map("Pendente")
  evaluated  @map("Avaliada")
  canceled   @map("Cancelada")
  others     @map("Outros")
}

enum OwnerAction {
  teacher  @map("Professor")
  student  @map("Estudante")
}

enum SchoolTerm {
  twoMonths  @map("Bimestre")
  quarter    @map("Trimestre")
  semester   @map("Semestre")
}
