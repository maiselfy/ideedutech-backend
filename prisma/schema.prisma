// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male       @map("Masculino")
  female     @map("Feminino")
  notBinary  @map("Não Binário")
  others     @map("Outros")
  notInform  @map("Prefiro Não Informar")
}

enum Role {
  admin    @map("Administrador")
  manager  @map("Gestor")
  teacher  @map("Professor")
  student  @map("Estudante")
  others   @map("Outros")
}

enum TypeUser {
  admin    @map("Administrador")
  manager  @map("Gestor")
  teacher  @map("Professor")
  student  @map("Estudante")
  others   @map("Outros")
}

enum Day {
  monday     @map("Segunda-Feira")
  thursday   @map("Terça-Feira")
  wednesday  @map("Quarta-Feira")
  tuesday    @map("Quinta-Feira")
  friday     @map("Sexta-Feira")
  saturday   @map("Sábado")
  sunday     @map("Domingo")
}

enum TypeHomeWork {
  activity  @map("Atividade")
  test      @map("Prova")
  work      @map("Trabalho")
  others    @map("Outros")
}

enum StageSubmission {
  sent     @map("Enviada")
  overdue  @map("Atrasada")
  pending  @map("Pendente")
}

model WaitList {
  id        String   @id @default(uuid())
  value     String   @unique
  approved  Boolean
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id])
  role      Role     @default(manager)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresIn Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  password      String
  birthDate     DateTime
  refreshTokens RefreshToken[]
  phone         String
  address       Address[]
  gender        Gender
  type          TypeUser
  manager       Manager?
  admin         Admin?
  teacher       Teacher?
  student       Student?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Student {
  id                String   @id @default(uuid())
  schoolId          String
  school            School   @relation(fields: [schoolId], references: [id])
  status            Boolean
  enrollment        String
  class             Class    @relation(fields: [classId], references: [id])
  classId           String
  entryForm         String
  reasonForTransfer String?
  parents           Parent[]
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Manager {
  id        String   @id @default(uuid())
  schools   School[]
  status    Boolean
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id        String   @id @default(uuid())
  status    Boolean
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  schools   School[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Parent {
  id        String    @id @default(uuid())
  name      String
  kinship   String
  studentId String
  contact   String
  addressId String
  students  Student[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ParentsOnStudent {
  student    Student  @relation(fields: [studentId], references: [id])
  studentId  String
  parent     Parent   @relation(fields: [parentId], references: [id])
  parentId   String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([studentId, parentId])
}

model Teacher {
  id          String       @id @default(uuid())
  schools     School[]
  status      Boolean
  disciplines Discipline[]
  userId      String       @unique
  user        User         @relation(fields: [userId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model School {
  id        String     @id @default(uuid())
  name      String
  phone     String
  address   Address[]
  cnpj      String?    @unique
  classes   Class[]
  waitist   WaitList[]
  teachers  Teacher[]
  managers  Manager[]
  students  Student[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Class {
  id            String          @id @default(uuid())
  name          String
  teacherId     String
  schooldId     String
  school        School          @relation(fields: [schooldId], references: [id])
  disciplines   Discipline[]
  students      Student[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Discipline {
  id        String     @id @default(uuid())
  name      String
  teacher   Teacher    @relation(fields: [teacherId], references: [id])
  teacherId String
  class     Class      @relation(fields: [classId], references: [id])
  classId   String
  topic     String
  lessons   Lesson[]
  homeWorks HomeWork[]
  planEducation PlanEducation[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Admin     Admin?     @relation(fields: [adminId], references: [id])
  adminId   String?
}

model Class {
  id          String       @id @default(uuid())
  name        String
  schooldId   String
  school      School       @relation(fields: [schooldId], references: [id])
  disciplines Discipline[]
  students    Student[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Discipline {
  id        String                @id @default(uuid())
  name      String
  teacher   Teacher               @relation(fields: [teacherId], references: [id])
  teacherId String
  class     Class                 @relation(fields: [classId], references: [id])
  classId   String
  lessons   Lesson[]
  homeWorks HomeWork[]
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  schedules DisciplineSchedules[]
}

model HomeWork {
  id           String       @id @default(uuid())
  name         String
  description  String
  discipline   Discipline   @relation(fields: [disciplineId], references: [id])
  disciplineId String
  dueDate      DateTime
  isOpen       Boolean
  attachement  String?
  type         TypeHomeWork
  submissions  Submission[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Submission {
  id          String           @id @default(uuid())
  studentId   String
  homeWork    HomeWork         @relation(fields: [homeWorkId], references: [id])
  homeWorkId  String
  rating      Float?
  dueDate     DateTime
  attachement String?
  stage       StageSubmission?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model PlanEducation {
  id           String   @id @default(uuid())
  schoolYear   String
  disciplineId String
  discipline   Discipline      @relation(fields: [disciplineId], references: [id])
  periods      Period[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model Period {
  id              String         @id @default(uuid())
  contents        Content[]
  PlanEducation   PlanEducation @relation(fields: [planEducationId], references: [id])
  planEducationId String
  startOfPeriod   DateTime
  endOfPeriod     DateTime
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Content {
  id         String  @id @default(uuid())
  name       String
  subContent String
  Period     Period @relation(fields: [periodId], references: [id])
  periodId   String
}

model Lesson {
  id           String          @id @default(uuid())
  name         String
  description  String
  disciplineId String
  discipline   Discipline      @relation(fields: [disciplineId], references: [id])
  schedules    ClassSchedule[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model ClassSchedule {
  id           String   @id @default(uuid())
  lessons      Lesson[]
  day          Day
  disciplineId String
  initialHour  DateTime
  finishHour   DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

}

model Lesson {
  id           String     @id @default(uuid())
  name         String
  description  String
  disciplineId String
  discipline   Discipline @relation(fields: [disciplineId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model DisciplineSchedules {
  id           String     @id @default(uuid())
  day          Day
  disciplineId String
  discipline   Discipline @relation(fields: [disciplineId], references: [id])
  initialHour  DateTime
  finishHour   DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

}

model Address {
  id           String   @id @default(uuid())
  labelAddress String
  street       String
  city         String
  number       String
  area         String
  uf           String
  zipCode      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  school       School?  @relation(fields: [schoolId], references: [id])
  schoolId     String?
  user         User?    @relation(fields: [userId], references: [id])
  userId       String?
}
